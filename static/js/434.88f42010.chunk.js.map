{"version":3,"file":"static/js/434.88f42010.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/ContactListItem/ContactListItem.styled.js","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","pages/Contacts/Contacts.styled.js","pages/Contacts/Contacts.jsx"],"sourcesContent":["export const getContacts = state => state.contacts.items;\n\nexport const getIsLoading = state => state.contacts.isLoading;\n\nexport const getFilterContacts = state => state.filter;\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  gap: 20px;\n`;\n\nexport const LabelForm = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n  font-size: 20px;\n  font-weight: 500;\n`;\n\nexport const InputForm = styled.input`\n  height: 20px;\n  width: 350px;\n  padding: 5px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  :focus {\n    outline: none;\n    border-color: #007bff;\n    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);\n  }\n  :hover {\n    border-color: #007bff;\n  }\n`;\n\nexport const ButtonForm = styled.button`\n  width: 100px;\n  height: 30px;\n  padding: 5px;\n  font-weight: 500;\n  font-size: 14px;\n  border-radius: 5px;\n  border-color: #84c3be;\n  background-color: #abcdef;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) box-shadow\n    250ms cubic-bezier(0.4, 0, 0.2, 1);\n  :hover,\n  :focus {\n    background-color: #669e85;\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);\n  }\n`;\n","import { useState } from 'react';\nimport toast from 'react-hot-toast';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { getContacts } from 'redux/contacts/selectors';\nimport { ButtonForm, Form, InputForm, LabelForm } from './ContactForm.styled';\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const handleChange = evt => {\n    const { name, value } = evt.target;\n    if (name === 'name') setName(value);\n    else if (name === 'number') setNumber(value);\n  };\n\n  const addNewContact = () => {\n    let newContact = {\n      number,\n      name,\n    };\n\n    const newContactName = contacts.find(\n      contact =>\n        contact.name.toLowerCase() === newContact.name.toLowerCase().trim()\n    );\n\n    if (newContactName) {\n      return toast.error(`${newContact.name} is already in contacts.`);\n    } else {\n      dispatch(addContact(newContact));\n      toast('Success! This contact will be added to your Phonebook.');\n    }\n  };\n\n  const onFormSubmit = e => {\n    e.preventDefault();\n    addNewContact();\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <Form onSubmit={onFormSubmit}>\n      <LabelForm>\n        Name\n        <InputForm\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Enter name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          onChange={handleChange}\n          value={name}\n        />\n      </LabelForm>\n      <LabelForm>\n        Number\n        <InputForm\n          type=\"tel\"\n          name=\"number\"\n          placeholder=\"Enter number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          onChange={handleChange}\n          value={number}\n        />\n      </LabelForm>\n      <ButtonForm type=\"submit\">Add contact</ButtonForm>\n    </Form>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ListContactText = styled.p`\n  font-size: 18px;\n  font-weight: 500;\n`;\n\nexport const ButtonDelete = styled.button`\n  width: 60px;\n  height: 30px;\n  padding: 5px;\n  font-weight: 500;\n  font-size: 14px;\n  border-radius: 5px;\n  border-color: #007bff;\n  background-color: #abcdef;\n  box-shadow: 0px 1px 1px rgba(0, 0, 0, 0.12), 0px 4px 4px rgba(0, 0, 0, 0.06),\n    1px 4px 6px rgba(0, 0, 0, 0.16);\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  :hover,\n  :focus {\n    background-color: #cac4b0;\n  }\n`;\n","import { ButtonDelete, ListContactText } from './ContactListItem.styled';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\n\nexport const ContactListItem = ({ contact }) => {\n  const dispatch = useDispatch();\n  return (\n    <>\n      <ListContactText>\n        {contact.name}: {contact.number}\n      </ListContactText>\n      <ButtonDelete\n        type=\"button\"\n        onClick={() => dispatch(deleteContact(contact.id))}\n      >\n        Delete\n      </ButtonDelete>\n    </>\n  );\n};\n\nContactListItem.propTypes = {\n  contact: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","import styled from 'styled-components';\n\nexport const ListContacts = styled.ul`\n  width: 400px;\n  padding: 10px;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  margin-top: 10px;\n  overflow: auto;\n  ::-webkit-scrollbar {\n    width: 8px;\n  }\n  ::-webkit-scrollbar-track {\n    background-color: #f1f1f1;\n  }\n  ::-webkit-scrollbar-thumb {\n    background-color: #888;\n    border: 1px solid #f1f1f1;\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);\n  }\n  ::-webkit-scrollbar-thumb:hover {\n    background-color: #555;\n  }\n`;\n\nexport const ListContactItem = styled.li`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n`;\n\nexport const AboutConacts = styled.p`\n  font-size: 16px;\n  font-weight: 500;\n`;\n","import { ContactListItem } from 'components/ContactListItem/ContactListItem';\n\nimport { useSelector } from 'react-redux';\nimport { getContacts, getFilterContacts } from 'redux/contacts/selectors';\nimport {\n  AboutConacts,\n  ListContactItem,\n  ListContacts,\n} from './ContactList.styled';\n\nexport const ContactList = () => {\n  const contacts = useSelector(getContacts);\n\n  const filter = useSelector(getFilterContacts);\n\n  const visibleContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  return (\n    <>\n      <ListContacts>\n        {visibleContacts.map(contact => (\n          <ListContactItem key={contact.id}>\n            <ContactListItem contact={contact} />\n          </ListContactItem>\n        ))}\n      </ListContacts>\n      <AboutConacts>All contacts: {contacts.length}</AboutConacts>\n      {filter && (\n        <AboutConacts>Filtered contacts: {visibleContacts.length}</AboutConacts>\n      )}\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const WrapperFilter = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const FilterText = styled.p`\n  font-size: 20px;\n  font-weight: 700;\n`;\n\nexport const InputFilter = styled.input`\n  height: 20px;\n  width: 350px;\n  padding: 5px;\n  margin-top: 10px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  :focus {\n    outline: none;\n    border-color: #007bff;\n    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);\n  }\n  :hover {\n    border-color: #007bff;\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/contacts/filterSlice';\nimport { getFilterContacts } from 'redux/contacts/selectors';\nimport { FilterText, InputFilter, WrapperFilter } from './Filter.styled';\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilterContacts);\n\n  const handleFindName = evt => {\n    const { value } = evt.target;\n    dispatch(setFilter(value));\n  };\n\n  return (\n    <WrapperFilter>\n      <FilterText>Find Contacts by name</FilterText>\n      <label>\n        <InputFilter\n          type=\"text\"\n          name=\"filter\"\n          placeholder=\"Enter name\"\n          onChange={handleFindName}\n          value={filter}\n        />\n      </label>\n    </WrapperFilter>\n  );\n};\n","import styled from 'styled-components';\n\nexport const FormContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  gap: 20px;\n`;\nexport const WrapperFormName = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  gap: 20px;\n  padding: 20px;\n  width: 400px;\n  height: 350px;\n  border-radius: 5px;\n  background-color: rgb(124, 185, 232);\n  box-shadow: 0px 1px 1px rgba(0, 0, 0, 0.12), 0px 4px 4px rgba(0, 0, 0, 0.06),\n    1px 4px 6px rgba(0, 0, 0, 0.16);\n`;\n\nexport const WrapperFormContacts = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: baseline;\n  gap: 20px;\n  padding: 20px;\n  width: 400px;\n  height: 350px;\n  border-radius: 5px;\n  background-color: rgb(124, 185, 232);\n  box-shadow: 0px 1px 1px rgba(0, 0, 0, 0.12), 0px 4px 4px rgba(0, 0, 0, 0.06),\n    1px 4px 6px rgba(0, 0, 0, 0.16);\n`;\n\nexport const ContactsWrapper = styled.div`\n  display: flex;\n  height: 100vh;\n  align-items: center;\n  justify-content: center;\n  background-position: center;\n  background-repeat: no-repeat;\n  background-size: cover;\n`;\n","import { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { useEffect } from 'react';\nimport { Helmet } from 'react-helmet';\n// import { Toaster } from 'react-hot-toast';\nimport { useDispatch } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport {\n  ContactsWrapper,\n  FormContainer,\n  WrapperFormContacts,\n  WrapperFormName,\n} from './Contacts.styled';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Contacts</title>\n      </Helmet>\n      <ContactsWrapper>\n        <FormContainer>\n          <WrapperFormName>\n            <ContactForm />\n          </WrapperFormName>\n          <WrapperFormContacts>\n            <Filter />\n            <ContactList />\n          </WrapperFormContacts>\n        </FormContainer>\n      </ContactsWrapper>\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["getContacts","state","contacts","items","getFilterContacts","filter","Form","styled","LabelForm","InputForm","ButtonForm","ContactForm","useState","name","setName","number","setNumber","useSelector","dispatch","useDispatch","handleChange","evt","target","value","onSubmit","e","preventDefault","newContact","find","contact","toLowerCase","trim","toast","addContact","addNewContact","type","placeholder","pattern","title","required","onChange","ListContactText","ButtonDelete","ContactListItem","onClick","deleteContact","id","ListContacts","ListContactItem","AboutConacts","ContactList","visibleContacts","includes","map","length","WrapperFilter","FilterText","InputFilter","Filter","setFilter","FormContainer","WrapperFormName","WrapperFormContacts","ContactsWrapper","useEffect","fetchContacts","Helmet"],"sourceRoot":""}